_ sup/sub/limits:
  do in mathml module (obviously in latex it's easy)
  * limits command: set a special variable 'limits',
    parse an item, and unset it.
    the sup/sub parser will check for this variable and behave accordingly.
  * sub/sup parser:
    check to make sure special variable 'subsup' is not set
    if it is, exit; if not, set 'subsup'
    parse an item
    try parsing sub/super.
    render result
    unset 'subsup'
    NOTE: this won't work, because while subsup is set we won't get
    subscripts + superscripts, even in nested contents.

    of course, could just do the inefficient thing:  first, a parser
    that parses something + limits/supscript; if that fails, go to
    regular parser. so everything gets parsed twice.  but, besides
    inefficiency, this would have the problem that the supr/sup/limits
    parser would have to be the first parser applied -- limiting
    user's ability to add new math parsers.

    another approach?  wrap the whole math parser.  parse something.
    then, check for a following sub/super, and modify output accordingly.
    (as in texmath)  how to do the wrapping?  could be in def of 'math',
    though this requires gumming up Tex.Hex with detailed math stuff.
    what about in addParser Math?

_ mathML:
  _ arrays
  _ superscript, subscript, limit
_ whitespace parser?
_ outer shell - preamble stuff, css, encoding, etc.
_ \index also in HTML!
_ mathML to SVG? www.grigoriev.ru/svgmath/
_ add accented character commands to standard parsers
_ jail for IO?
_ figure out how to do verbatims
_ figure out how to do environments (do we need them? why not just use
  {} for grouping?)
_ math in both formats (mathml?)
_ bibliography w/ citeproc
_ syntactic macros (why not? in many cases going to Haskell is overkill)
_ hexto?

hexto
-----


my.hex:
------------
\title{This is my document!}

Here's my \emph{text}.
------------

my.hs:
------------
import Text.HeX

main = defaultMain parsers
------------


hexto html /dir/my.hex:
- looks for /dir/my.hex
- if found, looks for /dir/my.hs
- else error
- if found, runs it with: 'runghc $OPTS /dir/my.hs html',
  taking input from /dir/my.hex, output to --output file
  if specified or stdout
- else create it using default, then run as above



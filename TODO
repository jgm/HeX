Ideas:

* should write all macros as functions
  Builder -> HeX Builder etc.
  and use command like functions to turn them into reg parsers.
  this makes them recombinable.

  use typeable.
  if f is f :: Maybe a -> Builder -> HeX Builder, e.g.,
  then we get:
  do x <- getOpt
     y <- getArg
     p x y

* Abstract out Builder -> Doc, so we can change implementation
  later. (fromString, fromChar) (this will also let us get rid
  of the orphan instance)

  -- even better advantage:  we can have Doc, Math, Css, Note, etc.
     these will be accumulated in a DList of Builders.  When we
     consntruct the final document, they'll all be treated differently;
     e.g. we'll ensure that Math gets surrounded by $$s, Css goes
     at beginning, Note at end, etc. (Perhaps they need more generic
     names.)

* environments:
  \quote{
  blah blah
  }

  the quote command will strip off the initial newline.

* Writeup on motivations:

  good things about pandoc:
  - canonical document that can go into many formats
  bad things:
  - no extensibility
  - no macros
  good things about latex;
  - extensibility through macros
  - no limitations
  bad things about latex:
  - ugly language to program in, difficult to write macros

